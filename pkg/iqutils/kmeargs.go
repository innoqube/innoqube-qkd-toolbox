package iqutils

import (
	"flag"
	"log"
	"os"
)

type QKDRuntime struct {
	certificate     string
	privateKey      string
	kme             string
	sae             string
	keyID           string
	Debug           bool
	Quiet           bool
	X509CertSubject string
	X509FilePrefix  string
	X509Days        int
}

var qkdRuntime QKDRuntime

var cert = flag.String("certificate", os.Getenv("QKD_CLIENT_CERTIFICATE"), "Patch to the QKD client certificate")
var key = flag.String("privatekey", os.Getenv("QKD_CLIENT_PRIVATE_KEY"), "Path to the QKD client private key")

var sae = flag.String("qkd-sae", os.Getenv("QKD_SAE"), "Name of the target SAE")
var kmeURL = flag.String("qkd-kme", os.Getenv("QKD_KME"), "URL for the QKD KME endpoint")
var keyid = flag.String("qkd-keyid", os.Getenv("QKD_KEYID"), "(optional) ID for the QKD key generated by KME")

var x509CertSubject = flag.String("x509-cert-subject", os.Getenv("QKD_X509_CERT_SUBJECT"), "x509 Certificate subject: '/C=RO/ST=TM/L=Timisoara/OU=Quantum Division/O=InnoQube/CN=quantum-app-1'")
var x509FilePrefix = flag.String("x509-file-prefix", "x509-quantum-crypto", "x509 certificate files prefix (for both certificate and private key) (default: x509-quantum-crypto)")
var x509Days = flag.Int("x509-days", 365, "x509 certificate validity period in days (default: 365)")

var cdebug = flag.Bool("debug", false, "Enable debug mode")
var cquiet = flag.Bool("quiet", false, "Enable quiet mode; it will output the retrieved keys like keyID:key")

var debug bool
var quiet bool

func ArgsValidator() QKDRuntime {
	flag.Parse()
	if *cert == "" || *key == "" {
		log.Fatalf("[!!] Both certificate and private key must be provided.")
		flag.Usage()
	} else {
		_, err := os.Stat(*cert)
		if err != nil {
			log.Fatalf("[!!] Invalid certificate path [%s]\n", *cert)
		}
		_, err = os.Stat(*key)
		if err != nil {
			log.Fatalf("[!!] Invalid private key path [%s]\n", *key)
		}
	}

	if *sae == "" {
		log.Fatalf("[!!] QKD SAE short name must be provided.")
		flag.Usage()
	}

	if *kmeURL == "" {
		log.Fatalf("[!!] QKD KME endpoint must be provided.")
		flag.Usage()
	}

	debug = *cdebug
	quiet = *cquiet

	qkdRuntime = QKDRuntime{
		certificate:     *cert,
		privateKey:      *key,
		kme:             *kmeURL,
		sae:             *sae,
		keyID:           *keyid,
		Debug:           *cdebug,
		Quiet:           *cquiet,
		X509CertSubject: *x509CertSubject,
		X509FilePrefix:  *x509FilePrefix,
		X509Days:        *x509Days,
	}

	return qkdRuntime
}
