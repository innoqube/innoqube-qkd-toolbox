package main

import (
	"flag"
	"innoqube-qkd-toolbox/pkg/iqutils"
	"log"
	"os"
)

var _cert = flag.String("certificate", os.Getenv("QKD_CLIENT_CERTIFICATE"), "Patch to the QKD client certificate")
var _key = flag.String("privatekey", os.Getenv("QKD_CLIENT_PRIVATE_KEY"), "Path to the QKD client private key")

var _qkd_sae = flag.String("qkd-sae", os.Getenv("QKD_SAE"), "Name of the target SAE")
var _qkd_kme = flag.String("qkd-kme", os.Getenv("QKD_KME"), "URL for the QKD KME endpoint")
var _qkd_keyid = flag.String("qkd-keyid", os.Getenv("QKD_KEYID"), "(optional) ID for the QKD key generated by KME")

var _debug = flag.Bool("debug", false, "Enable debug mode")

func _args_validator() int {
	flag.Parse()
	if *_cert == "" || *_key == "" {
		log.Fatalf("[!!] Both certificate and private key must be provided.")
		flag.Usage()
	} else {
		_, err := os.Stat(*_cert)
		if err != nil {
			log.Fatalf("[!!] Invalid certificate path [%s]\n", *_cert)
		}
		_, err = os.Stat(*_key)
		if err != nil {
			log.Fatalf("[!!] Invalid private key path [%s]\n", *_key)
		}
	}

	if *_qkd_sae == "" {
		log.Fatalf("[!!] QKD SAE short name must be provided.")
		flag.Usage()
	}

	if *_qkd_kme == "" {
		log.Fatalf("[!!] QKD KME endpoint must be provided.")
		flag.Usage()
	}

	return 0
}

func main() {
	var _code int = _args_validator()
	if _code != 0 {
		os.Exit(_code)
	}
	status, key := iqutils.KMEKeyGet(
		*_cert,
		*_key,
		*_qkd_kme,
		*_qkd_sae,
		*_qkd_keyid,
		*_debug,
	)
	if status {
		log.Printf("KeyID: %s\n", key[0])
		log.Printf("Key: %s\n", key[1])
	} else {
		log.Printf("[!!] Error: %s\n", key[1])
	}
}
